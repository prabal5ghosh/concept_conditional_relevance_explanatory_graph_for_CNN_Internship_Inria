# %%

# Impala: Class number 352

import torch

import sys
import os

from crp.concepts import ChannelConcept

cc = ChannelConcept()


import torch
from torchvision.models.vgg import vgg16_bn
import torchvision.transforms as T
from PIL import Image


import torch
from crp.attribution import CondAttribution
from crp.image import imgify
import numpy as np
from PIL import Image, ImageDraw, ImageFont





# %%
import torch

import sys
import os

from crp.concepts import ChannelConcept

cc = ChannelConcept()


import torch
from torchvision.models.vgg import vgg16_bn
import torchvision.transforms as T
from PIL import Image


import torch
from crp.attribution import CondAttribution
from crp.image import imgify
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import torch
from torchvision.models.vgg import vgg16_bn
import torchvision.transforms as T
from PIL import Image
import numpy as np


device = "cuda:0" if torch.cuda.is_available() else "cpu"

model = vgg16_bn(True).to(device)
model.eval()

transform = T.Compose([T.Resize(256), T.CenterCrop(224), T.ToTensor(), T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])
image = Image.open("tutorials/images/impala_1.jpg")
# image = Image.open("tutorials/images/dog1.jpg")

sample = transform(image).unsqueeze(0).to(device)

import sys

# output_file_path = '/home/prghosh/output_image/image_512/dog12_inference_1/output_file_dog12_1__1_inference_1.txt'
output_file_path = 'C:/Users/praba/Desktop/z_img/output_file_impala1_inference_1.txt'


with open(output_file_path, 'w') as file:
    # Redirect stdout to the file
    sys.stdout = file
    
        
    print("shape of the image: ",sample.shape)
    image


    print("--------------modified image----------------------")


    # # Define the region of interest (ROI)
    # x_start, y_start = 200, 90  # Top-left corner of the ROI
    # width, height = 150, 60     # Width and height of the ROI

    # # Convert the image to a NumPy array
    # image_array = np.array(image)

    # # Create a white image of the same size
    # white_image_array = np.ones_like(image_array) * 255  # RGB value for white is [255, 255, 255]

    # # Overlay the original ROI onto the white image
    # white_image_array[y_start:y_start+height, x_start:x_start+width] = image_array[y_start:y_start+height, x_start:x_start+width]

    # # Convert back to a PIL image
    # modified_image = Image.fromarray(white_image_array)


    # # Save the modified image
    # modified_image.save( "/home/prghosh/output_image/image_512/modified_image.jpg")  # Change the file name and format as needed

    # # Apply PyTorch transformations
    # transform = T.Compose([
    #     T.Resize(256),
    #     T.CenterCrop(224),
    #     T.ToTensor(),
    #     T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    # ])

    # # Transform the modified image
    # sample_t = transform(modified_image).unsqueeze(0).to(device)

    # # Now `sample` contains the transformed tensor ready for use with models
    # print(sample_t.shape)




    # Unnormalize the tensor for visualization
    unnormalize = T.Normalize(mean=[-0.485/0.229, -0.456/0.224, -0.406/0.225], std=[1/0.229, 1/0.224, 1/0.225])
    sample_unnorm = unnormalize(sample.squeeze(0))

    # Convert the tensor to a numpy array
    sample_np = sample_unnorm.permute(1, 2, 0).detach().cpu().numpy()
    sample_np = np.clip(sample_np, 0, 1)  # Clip values to be between 0 and 1

    # Convert to uint8 format for PIL compatibility
    sample_np_uint8 = (sample_np * 255).astype(np.uint8)

    # Plot the image
    # plt.imshow(sample_np_uint8)
    # plt.title('Plot of Transformed Tensor `sample` with size 224*224')
    # plt.show()

    from PIL import Image
    import numpy as np

    # Convert the NumPy array to a PIL Image
    image_to_save = Image.fromarray(sample_np_uint8)

    # Save the image to a file
    image_to_save.save("C:/Users/praba/Desktop/z_img/sample_impala1.jpg")  # Change the file path and name as needed

    print("modified Image saved successfully!")

    print("--------------mask image----------------------")

    # Define the region of interest (ROI)
    x_start, y_start = 85, 20  # Top-left corner of the ROI
    width, height = 75, 25    # Width and height of the ROI


    # Create a white image of the same size
    white_image_array = np.ones_like(sample_np_uint8) * 255  # RGB value for white is [255, 255, 255]

    # Overlay the original ROI onto the white image
    white_image_array[y_start:y_start+height, x_start:x_start+width] = sample_np_uint8[y_start:y_start+height, x_start:x_start+width]

    # Convert back to a PIL image
    modified_image = Image.fromarray(white_image_array)

    # Plot the image with the ROI
    # plt.imshow(modified_image)

    # Save the image to a file
    modified_image.save( "C:/Users/praba/Desktop/z_img/masked_image_impala_1__1.jpg")  # Change the file name and format as needed

    # image_to_save.save("modified_image.jpg")  # Change the file path and name as needed

    print("masked_image_impala_1__1.jpg saved successfully!")




    from zennit.composites import EpsilonPlusFlat   #  computes LRP relevance
    from zennit.canonizers import SequentialMergeBatchNorm   # Canonizer to merge the parameters of all batch norms that appear sequentially right after a linear module.

    from crp.attribution import CondAttribution  # This class contains the functionality to compute conditional attributions.

    composite = EpsilonPlusFlat([SequentialMergeBatchNorm()])  # The EpsilonPlusFlat composite will be used with a SequentialMergeBatchNorm to handle batch normalization layers.
    attribution = CondAttribution(model, no_param_grad=True)   # CondAttribution(model, no_param_grad=True) creates an attribution object for model without calculating gradients with respect to its parameters.



    sample.requires_grad = True

    from crp.image import imgify
    from crp.helper import get_layer_names
    from crp.attribution import CondAttribution
    from crp.image import imgify

    layer_names = get_layer_names(model, [torch.nn.Conv2d, torch.nn.Linear])

    print("layer_names: ",layer_names)


    # %%
    from crp.helper import get_layer_names
    from crp.attribution import CondAttribution
    from crp.image import imgify

    layer_names = get_layer_names(model, [torch.nn.Conv2d, torch.nn.Linear])

    import matplotlib.pyplot as plt




    print("this code is just for inference based on the information we got for dog 1.")


    print("--------------------------final heat map image------------------------------")


    # conditions = [{'features.40': concept_ids_list ,'features.37': concept_ids_list_1,'features.34': concept_ids_list_2,'features.30': concept_ids_list_3,'features.27': concept_ids_list_4,'features.24': concept_ids_list_5,'features.20': concept_ids_list_6,'features.17': concept_ids_list_7,'features.14': concept_ids_list_8,'features.10': concept_ids_list_9,'features.7': concept_ids_list_10,'features.3': concept_ids_list_11,'features.0': concept_ids_list_12, 'y': [208]}]
    conditions =[{'features.40': [327, 117, 415, 323, 476, 385, 264, 210, 465, 454, 56, 438, 484, 273, 497, 285], 
                  'features.37': [204, 78, 394, 414, 75, 196, 203, 476, 435, 5, 210, 236, 426, 497, 465, 227, 64, 490, 119, 428, 59, 318, 359, 97, 450, 83, 393, 182, 62, 93, 396, 8, 72, 187, 494, 445, 212, 289, 368, 279, 219, 439, 124, 98, 130, 327, 452, 113, 266, 397, 159, 365, 317, 214, 268, 325, 35, 431, 247, 63, 28, 158, 392, 409, 324, 373], 
                  'features.34': [249, 99, 160, 443, 488, 425, 274, 472, 83, 392, 5, 158, 283, 340, 310, 117, 238, 129, 418, 172, 111, 260, 350, 344, 380, 114, 456, 477, 457, 406, 273, 59, 47, 220, 438, 38, 76, 451, 173, 221, 194, 3, 156, 101, 414], 
                  'features.30': [198, 430, 193, 91, 465, 95, 257, 143, 240, 466, 401, 458, 326, 132, 408, 102, 96, 191, 118, 314, 151, 0, 47, 78, 6, 315, 222], 
                  'features.27': [122, 33, 468, 80, 48, 449, 395, 469, 295, 432, 132, 307, 40, 302, 241, 413, 47, 481, 198, 388, 236, 108, 208, 46, 447, 212, 131, 344, 397, 150, 467, 138, 120, 246, 310, 185, 36, 251, 462, 263, 136, 15, 479, 453, 483, 362, 273, 121, 91, 184, 201], 
                  'features.24': [363, 5, 379, 268, 119, 149, 468, 129, 389, 65, 137, 370, 476, 106, 412, 326, 385, 244, 218, 253, 467], 
                  'features.20': [232, 235, 204, 131, 88, 214, 136, 181, 59, 11, 0, 51, 30, 223, 183, 241, 29, 94, 144, 125, 132, 240, 46, 187, 202, 199], 
                  'features.17': [136, 104, 198, 90, 11, 208, 162, 60, 207, 183, 226, 84, 166, 225, 39, 140, 186, 31, 14, 177, 189, 81, 44, 132, 255, 215, 68, 182, 76, 152, 238, 7, 94, 73, 144, 227, 119, 160, 139, 61, 172, 193, 251, 224, 116, 58, 145, 178, 231, 236, 77, 200, 93, 163, 241, 41, 24, 85, 71, 194, 213, 146, 250, 21, 20, 121, 2, 75, 158, 212, 67, 148, 109, 143, 48, 36, 37, 5, 159, 51, 95, 185, 168, 243, 179, 101, 248, 115, 100, 195, 113, 49, 111, 38, 142, 149, 129, 29, 106, 18, 65, 175, 204, 180, 131, 181, 22, 83, 221, 69],
                    'features.14': [46, 210, 139, 250, 115, 201, 159, 179, 21, 57, 246, 192, 36, 13, 78, 51, 67, 100, 225, 155, 118, 53, 75, 70, 11, 127, 241, 232, 50, 244, 22, 120, 104, 167, 56, 24, 31, 213, 180, 12, 35, 191, 131, 79, 135, 230, 91, 222, 166, 95, 253, 182, 193, 158, 146, 154, 187, 229, 183, 1, 160, 5, 128, 172, 39, 10, 199, 194, 34, 208, 101, 84, 49, 122, 19, 136, 43, 226, 16, 178, 61, 196, 30, 87, 98, 231, 150, 247, 33, 15, 23, 164, 41, 99, 138, 2, 216, 62, 249, 88, 215, 69, 233, 60, 243, 96, 236, 3, 252, 85, 175, 20, 0, 223, 186, 102, 7, 147, 206, 105, 151, 66, 153, 117, 205, 97, 185, 188, 209, 161, 145, 65, 238, 63, 64, 171, 71, 218, 40, 114, 174, 169, 103, 132, 80, 224, 177, 107, 32, 58, 227, 144, 235, 219, 121, 4, 212, 184, 165, 195], 'features.10': [43, 96, 54, 34, 88, 107, 66, 102, 113, 7, 22, 26, 103, 1, 122, 13, 78, 11, 31, 10, 68, 106, 101, 48, 3, 124, 52, 28, 110, 93, 37, 51, 55, 100, 115, 36, 60, 46, 47, 39, 42, 112, 67, 79, 45, 29, 9, 82, 15, 20, 114, 83, 99, 76, 127, 27, 41, 32, 25, 21, 90, 23, 24, 109, 56, 40, 125, 86, 14, 30, 111, 120, 77, 61, 59, 5, 72, 117, 84, 2, 81, 95, 121, 74, 71, 87, 70, 53, 49, 104, 62, 108, 69, 118, 75, 116, 4, 64, 65, 17, 44, 98, 63, 50, 97, 12, 6, 126, 19, 18, 92, 91, 94, 85, 35, 33, 38, 73], 'features.7': [127, 5, 46, 63, 69, 81, 17, 113, 94, 8, 31, 36, 60, 67, 44, 72, 21, 57, 105, 19, 16, 68, 41, 103, 117, 7, 35, 100, 125, 101, 97, 61, 65, 78, 118, 112, 73, 107, 119, 58, 32, 95, 88, 70, 1, 27, 89, 56, 47, 12, 123, 104, 120, 110, 23, 96, 37, 83, 18, 116, 126, 114, 22, 50, 79, 0, 87, 90, 82, 91, 62, 74, 33, 3, 109, 64, 4, 34, 59, 39, 99, 54, 124, 98, 121], 'features.3': [16, 5, 27, 7, 13, 63, 26, 4, 18, 20, 39, 41, 35, 8, 22, 59, 60, 14, 62, 24, 11, 25, 51, 23, 53, 56, 31, 58, 38, 29, 54, 10, 32, 42, 3, 1, 33, 48, 19, 45, 15, 40, 37, 6, 47, 9, 49, 21, 28, 2], 'features.0': [28, 18, 15, 23, 12, 48, 41, 30, 38, 33, 63, 27, 16], 
                    'y': [352]}]

    print("conditions for final heat map image: ",conditions)
    heatmap, _, _, _ = attribution(sample, conditions, composite)



        
    # Create the final image
    final_image = imgify(heatmap, symmetric=True)

    # Convert to 'RGB' mode if necessary
    if final_image.mode != 'RGB':
        final_image = final_image.convert('RGB')

    # Specify the path and filename
    save_directory = "C:/Users/praba/Desktop/z_img/dog12_inference_1/"  # Update this to your desired directory

    if not os.path.exists(save_directory):
        os.makedirs(save_directory)

    file_name = "final_image_heat_map_impala_1__1.jpg"

    file_path = os.path.join(save_directory, file_name)

    # Save the image as a JPG file
    final_image.save(file_path, format="JPEG")

    print(f"Saved heatmap grid as {file_name}")


    print("------------------------------------------end--------------------------------------------")

    print("----------------------------------4---------------------------------------------------")
    print("-------------------------------------------------------------------------------------")














    conditions = [{
                    'features.40': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511],
                    'features.37': [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 211, 213, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511],
                    'features.34': [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], 
                    'features.30': [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], 
                    'features.27': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], 
                    'features.24': [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], 
                    'features.20': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], 
                    'features.17': [0, 1, 3, 4, 6, 8, 9, 10, 12, 13, 15, 16, 17, 19, 23, 25, 26, 27, 28, 30, 32, 33, 34, 35, 40, 42, 43, 45, 46, 47, 50, 52, 53, 54, 55, 56, 57, 59, 62, 63, 64, 66, 70, 72, 74, 78, 79, 80, 82, 86, 87, 88, 89, 91, 92, 96, 97, 98, 99, 102, 103, 105, 107, 108, 110, 112, 114, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 130, 133, 134, 135, 137, 138, 141, 147, 150, 151, 153, 154, 155, 156, 157, 161, 164, 165, 167, 169, 170, 171, 173, 174, 176, 184, 187, 188, 190, 191, 192, 196, 197, 199, 201, 202, 203, 205, 206, 209, 210, 211, 214, 216, 217, 218, 219, 220, 222, 223, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 242, 244, 245, 246, 247, 249, 252, 253, 254], 
                   'features.14': [6, 8, 9, 14, 17, 18, 25, 26, 27, 28, 29, 37, 38, 42, 44, 45, 47, 48, 52, 54, 55, 59, 68, 72, 73, 74, 76, 77, 81, 82, 83, 86, 89, 90, 92, 93, 94, 106, 108, 109, 110, 111, 112, 113, 116, 119, 123, 124, 125, 126, 129, 130, 133, 134, 137, 140, 141, 142, 143, 148, 149, 152, 156, 157, 162, 163, 168, 170, 173, 176, 181, 189, 190, 197, 198, 200, 202, 203, 204, 207, 211, 214, 217, 220, 221, 228, 234, 237, 239, 240, 242, 245, 248, 251, 254, 255],
                   'features.10': [0, 8, 16, 57, 58, 80, 89, 105, 119, 123], 
                   'features.7': [2, 6, 9, 10, 11, 13, 14, 15, 20, 24, 25, 26, 28, 29, 30, 38, 40, 42, 43, 45, 48, 49, 51, 52, 53, 55, 66, 71, 75, 76, 77, 80, 84, 85, 86, 92, 93, 102, 106, 108, 111, 115, 122], 
                   'features.3': [0, 12, 17, 30, 34, 36, 43, 44, 46, 50, 52, 55, 57, 61], 
                    'features.0': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 19, 20, 21, 22, 24, 25, 26, 29, 31, 32, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], 
                    'y': [352]}]

    print("conditions for complement of final heat map image: ",conditions)
    heatmap, _, _, _ = attribution(sample, conditions, composite)



        
    # Create the final image
    final_image = imgify(heatmap, symmetric=True)

    # Convert to 'RGB' mode if necessary
    if final_image.mode != 'RGB':
        final_image = final_image.convert('RGB')

    # Specify the path and filename
    save_directory = "C:/Users/praba/Desktop/z_img/"  # Update this to your desired directory

    if not os.path.exists(save_directory):
        os.makedirs(save_directory)

    file_name = "complement_final_image_heat_map_impala1_1__1.jpg"

    file_path = os.path.join(save_directory, file_name)

    # Save the image as a JPG file
    final_image.save(file_path, format="JPEG")

    print(f"Saved heatmap grid as {file_name}")
sys.stdout = sys.__stdout__

print("Output has been saved to the file.")




